class Solution {
public:
    bool canPartition(vector<int>& nums)
    {
        int x = accumulate(nums.begin(),nums.end(),0);
        if(x%2!=0)
        {
            return false;
        }
        else
        {
            x = x/2;
            vector<vector<int>>v(nums.size(),vector<int>(x+1));
            for(int i=0;i<nums.size();i++)
            {
                v[i][0] = 1;
            }
            for(int j=1;j<=x;j++)
            {
                if(j==nums[0])
                {
                    v[0][j] = 1;
                }
                else
                {
                    v[0][j] = 0;
                }
                
            }
            for(int i=1;i<nums.size();i++)
            {
                for(int j=1;j<=x;j++)
                {
                    if(v[i-1][j]==1)
                    {
                        v[i][j] = 1;
                    }
                    else if((j - nums[i]) >= 0 && v[i-1][j-nums[i]]==1)
                    {
                        v[i][j] = 1;
                    }
                    else
                    {
                        v[i][j] = 0;
                    }
                }
            }
            /*for(int i=0;i<nums.size();i++)
            {
                for(int j=0;j<=x;j++)
                {
                    cout<<v[i][j]<<" ";
                }
                cout<<endl;
            }*/
            

           if(v[nums.size()-1][x] == 1)
           {
               return true;
           }     
        
        }
        return false;
    }
};
