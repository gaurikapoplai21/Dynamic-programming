class Solution {
public:
    string longestPalindrome(string s) 
    {
        if(s.size()==0)
        {
            return s;
        }
        int maxe = 1;
        int start = 0;
        vector<vector<int>> dp(s.size(),vector<int>(s.size()));
        for(int i=0;i<s.size();i++)
        {
            dp[i][i] = 1;
            if(i<(s.size()-1) && s[i]==s[i+1])
            {
                dp[i][i+1] = 2;
                maxe = 2;
                start = i;
            }
            else if(i<s.size()-1)
            {
                dp[i][i+1] = 0;
            }
            
        }
        //cout<<"ok";
        for(int i=2;i<s.size();i++)
        {
            for(int st=0,e=st+i;e<s.size();st++,e++)
            {   
                if((s[st]==s[e]) && (dp[st+1][e-1] !=0))
                {
                    dp[st][e] = i+1;
                }
                else
                {
                    dp[st][e] = 0;
                }
                if(dp[st][e] > maxe)
                {
                    maxe = dp[st][e];
                    start = st;
                }
                
            }
        }
        cout<<start<<" "<<maxe;
        return s.substr(start,maxe);
    }
};
