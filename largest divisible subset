class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) 
    {
        if(nums.size()==0)
        {
            return nums;
        }
        vector<int> dp(nums.size());
        vector<int> ans;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();i++)
        {
            dp[i] = 1;
        }
        for(int i=1;i<nums.size();i++)
        {
            for(int j=0;j<i;j++)
            {
                if(nums[i]%nums[j]==0)
                {
                    dp[i] = max(dp[i],dp[j]+1);
                }
                
            }
        }
        cout<<*max_element(dp.begin(),dp.end());
        //return dp;
        vector<int> :: iterator it = max_element(dp.begin(),dp.end());
        int x = it - dp.begin();
        int z = nums[x];
        ans.push_back(nums[x]);
        int y = *it - 1;
        it--;
        for(it;it>=dp.begin();it--)
        {
            int i = it - dp.begin();
            if(*it == y && (nums[x]%nums[i] == 0))
            {
                int x = it - dp.begin();
                ans.push_back(nums[x]);
                y--;
            }
        }
       sort(ans.begin(),ans.end());
       return ans;
        
    }
};
